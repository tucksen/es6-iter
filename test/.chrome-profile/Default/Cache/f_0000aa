System.register("src/Iterable", [], function() {
  "use strict";
  var __moduleName = "src/Iterable";
  function Iterable(last, generatorFunction) {
    var hasLast = arguments.length >= 2;
    generatorFunction = hasLast ? generatorFunction : last;
    last = hasLast ? last : null;
    this['@@iterator'] = generatorFunction;
    this._last = last;
    this._events = {};
  }
  Iterable.prototype.emit = function(event) {
    if (this._last) {
      this._last.emit(event);
    }
    var events = this._events[event] || [];
    for (var i = 0,
        l = events.length; i < l; i++) {
      if (typeof events[i] === 'function')
        events[i].call(this);
    }
    return this;
  };
  Iterable.prototype.on = function(event, handler) {
    if (!Array.isArray(this._events[event])) {
      this._events[event] = [];
    }
    this._events[event].push(handler);
    return this;
  };
  Iterable.prototype.off = function(event, handler) {
    var events = this._events[event] || [];
    var position = events.indexOf(handler);
    if (position !== -1) {
      events[position] = null;
    }
    return this;
  };
  Iterable.prototype.once = function(event, handler) {
    this.on(event, function temp() {
      handler.call(this);
      this.off(event, temp);
    });
    return this;
  };
  Iterable.prototype.map = function(projection) {
    return new Iterable(this, function() {
      var $__0,
          $__1,
          x;
      return $traceurRuntime.generatorWrap(function($ctx) {
        while (true)
          switch ($ctx.state) {
            case 0:
              $__0 = this._last[Symbol.iterator]();
              $ctx.state = 4;
              break;
            case 4:
              $ctx.state = (!($__1 = $__0.next()).done) ? 5 : -2;
              break;
            case 5:
              x = $__1.value;
              $ctx.state = 6;
              break;
            case 6:
              $ctx.state = 2;
              return projection(x);
            case 2:
              $ctx.maybeThrow();
              $ctx.state = 4;
              break;
            default:
              return $ctx.end();
          }
      }, this);
    });
  };
  Iterable.prototype.takeWhile = function(predicate) {
    return new Iterable(this, function() {
      var $__0,
          $__1,
          x;
      return $traceurRuntime.generatorWrap(function($ctx) {
        while (true)
          switch ($ctx.state) {
            case 0:
              $__0 = this._last[Symbol.iterator]();
              $ctx.state = 9;
              break;
            case 9:
              $ctx.state = (!($__1 = $__0.next()).done) ? 10 : -2;
              break;
            case 10:
              x = $__1.value;
              $ctx.state = 11;
              break;
            case 11:
              $ctx.state = (!predicate(x)) ? 3 : 2;
              break;
            case 3:
              this.emit('close');
              $ctx.state = -2;
              break;
            case 2:
              $ctx.state = 7;
              return x;
            case 7:
              $ctx.maybeThrow();
              $ctx.state = 9;
              break;
            default:
              return $ctx.end();
          }
      }, this);
    });
  };
  function SyncReader() {
    this.current = -1;
    this.items = [1, 2, 3, 4, 5];
  }
  SyncReader.prototype.readLine = function() {
    this.current += 1;
    return this.items[this.current];
  };
  SyncReader.prototype.eof = function() {
    return this.current === this.items.length - 1;
  };
  SyncReader.prototype.close = function() {
    this.current = -1;
    this.items = [];
    console.log('closed');
  };
  var reader;
  function getLines(fileName) {
    reader = new SyncReader(fileName);
    return new Iterable(function() {
      return $traceurRuntime.generatorWrap(function($ctx) {
        while (true)
          switch ($ctx.state) {
            case 0:
              this.once('close', SyncReader.prototype.close.bind(reader));
              $ctx.state = 15;
              break;
            case 15:
              $ctx.pushTry(null, 7);
              $ctx.state = 9;
              break;
            case 9:
              if (!reader.eof()) {
                $ctx.state = 1;
                break;
              } else {
                $ctx.state = 7;
                $ctx.finallyFallThrough = -2;
                break;
              }
            case 1:
              $ctx.state = 2;
              return reader.readLine();
            case 2:
              $ctx.maybeThrow();
              $ctx.state = 9;
              break;
            case 7:
              $ctx.popTry();
              $ctx.state = 13;
              break;
            case 13:
              reader.close();
              $ctx.state = 11;
              break;
            case 11:
              $ctx.state = $ctx.finallyFallThrough;
              break;
            default:
              return $ctx.end();
          }
      }, this);
    });
  }
  ;
  var hum = getLines().once('close', (function() {
    return console.log('lkj');
  })).map((function(n) {
    return n * 2;
  })).takeWhile((function(n) {
    return n <= 8;
  }));
  return {};
});

//# sourceMappingURL=data:application/json;charset=utf-8;base64,

System.register("src/iter", [], function() {
  "use strict";
  var $__2;
  var __moduleName = "src/iter";
  var ObjectIterable = $traceurRuntime.assertObject(System.get("src/ObjectIterable")).default;
  var types = System.get("src/types");
  var iter = function iter(iterable) {
    for (var args = [],
        $__5 = 1; $__5 < arguments.length; $__5++)
      args[$__5 - 1] = arguments[$__5];
    if (!(this instanceof $iter))
      return new (Function.prototype.bind.apply($iter, $traceurRuntime.spread([null, iterable], args)))();
    if (!types.isIterable(iterable) && !types.isGenerator(iterable)) {
      if (types.isPlainObject(iterable)) {
        iterable = new ObjectIterable(iterable);
      } else
        throw new TypeError('Non iterable object passed to iter');
    }
    this._args = args;
    this._iterable = iterable || [];
    this._next = [];
  };
  var $iter = iter;
  ($traceurRuntime.createClass)(iter, ($__2 = {}, Object.defineProperty($__2, "array", {
    value: function() {
      return Array.isArray(this._iterable) ? this._iterable : $traceurRuntime.spread(this._iterable);
    },
    configurable: true,
    enumerable: true,
    writable: true
  }), Object.defineProperty($__2, "iterable", {
    value: function() {
      return this._iterable;
    },
    configurable: true,
    enumerable: true,
    writable: true
  }), Object.defineProperty($__2, "first", {
    value: function() {
      return advanceIterable(this._iterable, this._args, (function(value) {
        return false;
      }));
    },
    configurable: true,
    enumerable: true,
    writable: true
  }), Object.defineProperty($__2, "forEach", {
    value: function(cb) {
      var context = arguments[1] !== (void 0) ? arguments[1] : null;
      var next = this._next;
      advanceIterable(this._iterable, this._args, (function(value) {
        cb(value);
        next.push(value);
      }));
      return new $iter(this._next);
    },
    configurable: true,
    enumerable: true,
    writable: true
  }), Object.defineProperty($__2, "filter", {
    value: function(func) {
      var next = this._next;
      advanceIterable(this._iterable, this._args, (function(value) {
        if (func(value)) {
          next.push(value);
        }
      }));
      return new $iter(this._next);
    },
    configurable: true,
    enumerable: true,
    writable: true
  }), Object.defineProperty($__2, "take", {
    value: function(amount) {},
    configurable: true,
    enumerable: true,
    writable: true
  }), Object.defineProperty($__2, Symbol.iterator, {
    value: function() {
      var $__3,
          $__4,
          value;
      return $traceurRuntime.generatorWrap(function($ctx) {
        while (true)
          switch ($ctx.state) {
            case 0:
              $__3 = this._iterable[Symbol.iterator]();
              $ctx.state = 4;
              break;
            case 4:
              $ctx.state = (!($__4 = $__3.next()).done) ? 5 : -2;
              break;
            case 5:
              value = $__4.value;
              $ctx.state = 6;
              break;
            case 6:
              $ctx.state = 2;
              return value;
            case 2:
              $ctx.maybeThrow();
              $ctx.state = 4;
              break;
            default:
              return $ctx.end();
          }
      }, this);
    },
    configurable: true,
    enumerable: true,
    writable: true
  }), $__2), {
    isIterable: function(test) {
      return test && typeof test[Symbol.iterator] === 'function';
    },
    extend: function(object) {
      var extended = function extended() {
        for (var args = [],
            $__6 = 0; $__6 < arguments.length; $__6++)
          args[$__6] = arguments[$__6];
        if (!(this instanceof $extended))
          return new (Function.prototype.bind.apply($extended, $traceurRuntime.spread([null], args)))();
        $traceurRuntime.superCall(this, $extended.prototype, "constructor", $traceurRuntime.spread(args));
      };
      var $extended = extended;
      ($traceurRuntime.createClass)(extended, {}, {}, $iter);
      $iter(object).filter((function($__7) {
        var name = $__7[0],
            method = $__7[1];
        return typeof method === 'function';
      })).forEach((function($__8) {
        var name = $__8[0],
            method = $__8[1];
        return extended.prototype[name] = method;
      }));
      return $iter.staticify(extended);
    },
    staticify: function(klass) {
      Object.keys(klass.prototype).forEach((function(method) {
        klass[method] = function(iterable) {
          var $__9;
          for (var args = [],
              $__6 = 1; $__6 < arguments.length; $__6++)
            args[$__6 - 1] = arguments[$__6];
          return ($__9 = new klass(iterable))[method].apply($__9, $traceurRuntime.toObject(args));
        };
      }));
      return klass;
    }
  });
  iter.staticify(iter);
  function advanceIterable(iterable) {
    var $__9;
    var $__7;
    var args = arguments[1] !== (void 0) ? arguments[1] : [];
    var cb = arguments[2];
    var iterator = ($__9 = iterable)[Symbol.iterator].apply($__9, $traceurRuntime.toObject(args));
    var $__7 = $traceurRuntime.assertObject(iterator.next()),
        value = $__7.value,
        done = $__7.done;
    var returned;
    while (!done) {
      returned = cb(value);
      if (returned === false)
        break;
      (($__7 = $traceurRuntime.assertObject(($__9 = iterator).next.apply($__9, $traceurRuntime.toObject((returned || [])))), value = $__7.value, done = $__7.done, $__7));
    }
    return value;
  }
  function isPlainObject(o) {
    var proto = !!o && Object.getPrototypeOf(o);
    return proto === Object.prototype || proto === null;
  }
  Object.freeze(iter);
  Object.freeze(iter.prototype);
  ;
  var $__src_47_types__ = System.get("src/types");
  return $traceurRuntime.exportStar({
    get iter() {
      return iter;
    },
    get default() {
      return iter;
    }
  }, $__src_47_types__);
});

//# sourceMappingURL=data:application/json;charset=utf-8;base64,
